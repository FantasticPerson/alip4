1.如何理解this
    this本质是对象 this=》对象 对象是属性跟方法的综合体
    作为对象的方法调用 方法里面的this所指向的就是当前的对象

2.this的五种情况
    全局环境下的this 代表的就是window
    对象方法中的this 代表的就是当前对象
    构造函数中的this 面向对象时讲
    事件函数中的this 指向触发事件的element对象
    apply call bind中的this
    改变当前对象的原本的this的指向

    var box = document.getElementbyId('box');
    box.oninput = function(){
        fn.call(this)
    }
    function fn(){
        console.log(this) //document元素
    }

    var name = "name"
    function setName(){
        console.log(this.name);
    }
    setName()//name
    var obj = {
        name:'yangyang',
        fn:function(){
            console.log(name);
            setName.call(this) //yangyang
        }
    }
    

    bind()
    1.函数对象的方法
    2.作为函数对象调用bind的方法 不会立即调用当前函数对象，会返回一个新的函数，此时新函数与函数对象是一样的。此时函数对象中的this是bind函数的第一个参数
    3.

    var name = "name"
    var setName = function(){
        console.log(this.name);
    }

    setName.bind();//只是绑定 不会执行

    var result = setName.bind();//返回一个新的函数

    Function.prototype.apply
    Function.prototype.call
    Function.prototype.bind

    var result = setName.bind(o,2);
    result(3,4) //argument 2,3,4

    var name = "max";
    var obj = {
        name:'yangyang',
        fn:function(){
            function foo(){
                console.log(this.name);
            }
            foo();//没有 使用 this.foo()  所以指向的是 window
        }
    }
    obj.fn(); //max 

    console.log(foo) //undefined 但是实际上 window上是没有 foo的  所以这是一个设计缺陷

    修改
    var obj = {
        name:'yangyang',
        fn:function(){
            var _this = this;
            function foo(){
                console.log(_this.name);
            }
            foo();
        }
    }

    box.onclick = function(){

    }
    